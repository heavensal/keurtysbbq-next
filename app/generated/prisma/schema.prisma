// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// from Better-Auth

model User {
  id            String   @id @default(cuid())
  firstName     String
  lastName      String
  email         String?  @unique
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  role          Role     @default(customer)

  image    String?
  sessions Session[]
  accounts Account[]

  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?   @unique // Relation optional
  posts      Post[]

  @@map("user")
}

enum Role {
  customer
  manager
  admin
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("session")
}

model Account {
  id        String @id @default(cuid())
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId String

  provider          String
  providerAccountId String
  type              String
  accessToken       String?
  expiresAt         DateTime?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?

  providerId            String
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// représente un client avant qu'il s'inscrit
model Customer {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String   @unique
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation()
  userId    String? // Relation optional

  reservations Reservation[]
}

// les réservations
model Reservation {
  id          String            @id @default(cuid())
  customer    Customer          @relation(fields: [customerId], references: [id])
  customerId  String
  reservedAt  DateTime
  guestsCount Int
  status      ReservationStatus @default(pending)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

enum ReservationStatus {
  pending
  confirmed
  cancelled
  finished
}

// les Articles
model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([title])
  @@map("post")
}

// Les Questions de FAQ
model Faq {
  id        String   @id @default(cuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faq")
}
